---
# create and add zfs pool
- name: verify if ZFS pool exists
  shell: zpool list {{ lxd_zfs_pool_name }}
  register: zfspool
  ignore_errors: true

- name: print zfspool
  debug: var=zfspool

- name: create zfs file for lxd of 10GB
  command: "truncate -s 10G /usr/lib/lxd/zfs.img"
  when: zfspool.rc != 0

- name: create new zpool for lxd
  command: "zpool create {{ lxd_zfs_pool_name }} /usr/lib/lxd/zfs.img"
  when: zfspool.rc != 0

- name: verify if lxd is configured to use ZFS
  shell: lxc info | grep storage | grep zfs
  register: lxcinfo
  ignore_errors: true

- name: print lxcinfo
  debug: var=lxcinfo

- name: print lxcinfo.rc
  debug: var=lxcinfo.rc


- name: configure lxd to use zfs
  command: "lxd init --storage-backend zfs --storage-pool {{ lxd_zfs_pool_name }} --auto"
  #when: lxcinfo.rc != 0

# bridge setup 
- name: configure lxd bridge
  template: src=lxd-bridge.j2 dest=/etc/default/lxd-bridge mode=0644 backup=yes
  notify:
    - reconfigure lxd
    - restart lxd-bridge
  register: lxdconf

- name: force restart of lxd to have working network
  service: name=lxd state=restarted
  notify:
    - reconfigure lxd
    - restart lxd-bridge
  when: lxdconf.changed and (ansible_virtualization_type is not defined or ansible_virtualization_type != "lxc")

# lxc configure
- name: get lxc path
  shell: which lxc
  register: lxc_path

- name: Set lxc command
  set_fact: 
    lxd_lxc_path: "{{ lxc_path.stdout }}"

- name: allow remote operations
  command: "{{ lxd_lxc_path }} config set core.https_address {{ lxd_https_listen_address }}"
  when: lxd_allow_remote  

- name: set password for remote operations
  command: "{{ lxd_lxc_path }} config set core.trust_password '{{ lxd_trust_password }}'"
  when: lxd_allow_remote
  
